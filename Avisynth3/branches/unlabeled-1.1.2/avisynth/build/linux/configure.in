dnl ==========================================================================
dnl
dnl Autoconf script for XviD
dnl
dnl Copyright(C) 2003-2004 Edouard Gomez <ed.gomez@free.fr>
dnl
dnl ==========================================================================
dnl
dnl Modified for Avisynth 3.0
dnl
dnl Copyright(C) 2004 Vincent TORRI <torri@math.u-strasbg.fr>
dnl
dnl ==========================================================================

AC_PREREQ([2.50])

AC_INIT([Avisynth], [3.0], [http://forum.doom9.org])
AC_CONFIG_SRCDIR(configure.in)

dnl Do not forget to increase that when needed.
API_MAJOR="3"
API_MINOR="0"
VERSION="${API_MAJOR}.${API_MINOR}"
PACKAGE="Avisynth"

dnl NASM version requirement
minimum_nasm_patch_version=34
nasm_prog="nasm"

dnl BOOST version requirement
BOOST_VER_MAJOR="1"
BOOST_VER_MINOR="31"

dnl Default CFLAGS -- Big impact on overall speed
our_cxxflags_defaults="-O2 -Wall"
our_cxxflags_defaults="$our_cxxflags_defaults -fstrength-reduce"
our_cxxflags_defaults="$our_cxxflags_defaults -finline-functions"
our_cxxflags_defaults="$our_cxxflags_defaults -freduce-all-givs"
our_cxxflags_defaults="$our_cxxflags_defaults -ffast-math"
our_cxxflags_defaults="$our_cxxflags_defaults -ansi"

dnl Default GEN_SOURCES for gen_source.sh
dnl On Linux, Vfw and COM files should be removed
GEN_SOURCES=

dnl ==========================================================================
dnl Features - configure options
dnl
dnl modified
dnl
dnl ==========================================================================

FEATURES=""

dnl Assembly code
AC_ARG_ENABLE(assembly,
		AC_HELP_STRING([--disable-assembly],
				 [Disable assembly code]),
		 [if test "$enable_assembly" = "no" ; then
		     assembly="no"
		  else
		     if test "$enable_assembly" = "yes" ; then
			assembly="yes"
		     fi
		  fi],
		 [assembly="yes"])

dnl STL library check
AC_ARG_WITH(stl-path,
		AC_HELP_STRING([--with-stl-path=PATH],
		[STL Library headers]),
		[with_stl_arg="yes"],
		[with_stl_arg="no"])

dnl BOOST library check
AC_ARG_WITH(boost-path,
		AC_HELP_STRING([--with-boost-path=PATH],
		[BOOST Library headers]),
		[with_boost_arg="yes"],
		[with_boost_arg="no"])

dnl Build as a module not a shared lib on darwin
AC_ARG_ENABLE(macosx_module,
		AC_HELP_STRING([--enable-macosx_module],
				 [Build as a module on MacOS X]),
		 [if test "$enable_macosx_module" = "yes" ; then
		     macosx_module="yes"
		  else 
		     macosx_module="no"
		  fi],
		  [macosx_module="no"])

dnl ==========================================================================
dnl Default install prefix and checks build type
dnl ==========================================================================

AC_PREFIX_DEFAULT("/usr/local")
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl ==========================================================================
dnl Check for the C compiler (could be passed on command line)
dnl ==========================================================================

dnl
dnl First we test if CFLAGS have been passed on command line
dnl I do that because autoconf defaults (-g -O2) suck and they would kill
dnl performance. To prevent that we define a good defult CFLAGS at the end
dnl of the script if and only if CFLAGS has not been passed on the command
dnl line
dnl
AC_MSG_CHECKING(whether to use default CXXFLAGS)
if test  x"$CXXFLAGS" = x"" ; then
   force_default_cxx_options="yes"
   AC_MSG_RESULT([yes])
else
   force_default_cxx_options="no"
   AC_MSG_RESULT([no])
fi

dnl Now we can safely check for the C++ compiler
AC_PROG_CXX

dnl ==========================================================================
dnl Check for the install program
dnl ==========================================================================

AC_PROG_INSTALL

dnl ==========================================================================
dnl Check for the ranlib program to generate static library index
dnl ==========================================================================

AC_PROG_RANLIB

dnl ==========================================================================
dnl
dnl This part looks for:
dnl
dnl ARCHITECTURE : The platform architecture
dnl                - IA32 for mmx, mmx-ext, mmx2, sse assembly
dnl                - IA64
dnl                - PPC for PowerPC assembly routines
dnl                - GENERIC for plain C sources only
dnl
dnl BUS: Address bus size (in bits)
dnl      - 32
dnl      - 64
dnl
dnl ENDIANNESS: I think you can guess what this thing means :-)
dnl             - LITTLE_ENDIAN
dnl             - BIG_ENDIAN
dnl
dnl ==========================================================================

dnl
dnl Looking what sources have to be compiled according to the CPU type
dnl

ARCHITECTURE=""

AC_MSG_CHECKING([for whether to use assembly code])
if test x"$assembly" = x"yes" ; then
   AC_MSG_RESULT([yes])
   AC_MSG_CHECKING([for architecture type])
   case "$target_cpu" in
	  i[[3456]]86)
	  AC_MSG_RESULT(ia32)
	  	ARCHITECTURE="IA32"
		;;	
		powerpc)
		AC_MSG_RESULT(PowerPC)
		dnl ATM the ppc port is out of date 
		dnl ARCHITECTURE="PPC"
		ARCHITECTURE="GENERIC"
		;;
		ia64)
		AC_MSG_RESULT(ia64)
		ARCHITECTURE="IA64"
		;;
		*)
		AC_MSG_RESULT($target_cpu)
		ARCHITECTURE="GENERIC"
		;;
   esac
else
   AC_MSG_RESULT([no])
   ARCHITECTURE="GENERIC"
fi

dnl ==========================================================================
dnl
dnl Check for OS specific variables
dnl    - SHARED_EXTENSION, STATIC_EXTENSION, OBJECT_EXTENSION
dnl
dnl ==========================================================================

AC_MSG_CHECKING(for build extensions)
SHARED_EXTENSION=""
STATIC_EXTENSION=""
OBJECT_EXTENSION=""
case "$target_os" in
     *bsd*|linux*|beos|irix*|solaris*)
	AC_MSG_RESULT([.so .a .o])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="so"
	OBJECT_EXTENSION="o"
	;;
     [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
	AC_MSG_RESULT([.dll .a .obj])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="dll"
	OBJECT_EXTENSION="obj"
	;;
     darwin*|raphsody*)
	if test x"$macosx_module" = x"yes"; then
	   AC_MSG_RESULT([.so .a .o])
	   SHARED_EXTENSION="so"
        else
	   AC_MSG_RESULT([.dynlib .a .o])
	   SHARED_EXTENSION="dylib"
	fi
	STATIC_EXTENSION="a"
	OBJECT_EXTENSION="o"
	;;
     *)
        AC_MSG_RESULT([Unknown OS - Using .so .a .o])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="so"
	OBJECT_EXTENSION="o"
	;;
esac

dnl ==========================================================================
dnl
dnl Determines best options for CC and LD
dnl  - STATIC_LIB, SHARED_LIB, SPECIFIC_CFLAGS, SPECIFIC_LDLAGS
dnl
dnl
dnl
dnl ==========================================================================

AC_MSG_CHECKING(for platform specific LDFLAGS/CFLAGS)
SPECIFIC_LDFLAGS=""
SPECIFIC_CFLAGS=""
PRE_SHARED_LIB=""
case "$target_os" in
     *bsd*|linux*|irix*|solaris*)
	AC_MSG_RESULT([ok])
	STATIC_LIB="libavisynth.\$(STATIC_EXTENSION)"
	SHARED_LIB="libavisynth.\$(SHARED_EXTENSION).\$(API_MAJOR).\$(API_MINOR)"
	SPECIFIC_LDFLAGS="-pthread -Wl,-soname,libavisynth.\$(SHARED_EXTENSION).\$(API_MAJOR) -shared -lc -lm"
	SPECIFIC_CFLAGS="-fPIC"
	GEN_SOURCES="/com\\\\/d;/vfw\\\\/d;"
	;;
     [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
	AC_MSG_RESULT([ok])
	STATIC_LIB="libavisynth.\$(STATIC_EXTENSION)"
	SHARED_LIB="avisynth.\$(SHARED_EXTENSION)"
dnl	SPECIFIC_LDFLAGS="-lwinmm -lavcodec -lavformat -lgdi32 -lvfw32 -luuid -lole32 -mno-cygwin -shared -Wl,--dll,--out-implib,\$@.a libavisynth.def"
	SPECIFIC_LDFLAGS="-lwinmm -lgdi32 -lvfw32 -luuid -lole32 -mno-cygwin -shared -Wl,--out-implib,\$@.a"
	SPECIFIC_CFLAGS="-Os -mno-cygwin"
	;;
     darwin*|raphsody*)
	STATIC_LIB="libavisynth.\$(STATIC_EXTENSION)"
	SPECIFIC_CFLAGS="-fPIC -fno-common -no-cpp-precomp"
	if test x"$macosx_module" = x"no"; then
	   AC_MSG_RESULT([dylib options])
	   SHARED_LIB="libavisynth.\$(API_MAJOR).\$(SHARED_EXTENSION)"
	   SPECIFIC_LDFLAGS="-dynamiclib -flat_namespace -compatibility_version \$(API_MAJOR) -current_version \$(API_MAJOR).\$(API_MINOR) -install_name \$(libdir)/\$(SHARED_LIB)"
	else 
	   AC_MSG_RESULT([module options])
 	   PRE_SHARED_LIB="libavisynth.\$(SHARED_EXTENSION)-temp.o"
	   SHARED_LIB="libavisynth.\$(SHARED_EXTENSION).\$(API_MAJOR)"
	   SPECIFIC_LDFLAGS="-r -keep_private_externs -nostdlib && \$(CC) \$(LDFLAGS) \$(PRE_SHARED_LIB) -o libavisynth.\$(SHARED_EXTENSION).\$(API_MAJOR) -bundle -flat_namespace -undefined suppress"
	fi
	GEN_SOURCES="/vfw\\/d;"
	;;
     beos)
	AC_MSG_RESULT([ok])
	STATIC_LIB="libavisynth.\$(STATIC_EXTENSION)"
	SHARED_LIB="libavisynth.\$(SHARED_EXTENSION)"
	SPECIFIC_LDFLAGS="-nostart"
	SPECIFIC_CFLAGS="-fPIC"
	;;
     *)
        AC_MSG_RESULT([Unknown Platform (Using default -shared -lc -lm)])
	STATIC_LIB="libavisynth.\$(STATIC_EXTENSION)"
	SHARED_LIB="libavisynth.\$(SHARED_EXTENSION)"
	SPECIFIC_LDFLAGS=""
	SPECIFIC_CFLAGS=""
	;;
esac

if test x"$PRE_SHARED_LIB" = x; then 
  PRE_SHARED_LIB=$SHARED_LIB
fi

dnl ==========================================================================
dnl
dnl Assembler stuff
dnl  - AS, AFLAGS, ASSEMBLY_EXTENSION, SOURCES
dnl
dnl ==========================================================================

AS=""
AFLAGS=""
ASSEMBLY_EXTENSION=""
GENERIC_SOURCES="SRC_GENERIC"
ASSEMBLY_SOURCES=""

dnl
dnl IA32
dnl

if test "$ARCHITECTURE" = "IA32" ; then

   dnl
   dnl Checking nasm existence
   dnl
   AC_CHECK_PROG([ac_nasm], [$nasm_prog], [yes], [no], , [yes])
   if test "$ac_nasm" = "yes" ; then

      dnl
      dnl Checking nasm patch version
      dnl
      AC_MSG_CHECKING([for nasm patch version])
      nasm_patch=`nasm -r | cut -d '.' -f 3 | cut -d ' ' -f 1`
      if test -z $nasm_patch ; then
        nasm_patch=-1
      fi
      AC_MSG_RESULT([$nasm_patch])


      if test "$nasm_patch" -lt "$minimum_nasm_patch_version" ; then
        AC_MSG_WARN([nasm patch version too old - Compiling generic sources only])
	ARCHITECTURE="GENERIC"
      else

         dnl
         dnl Checking nasm format - win32 or elf
         dnl
         AC_MSG_CHECKING([for nasm object format])
         case "$target_os" in
              *bsd*|linux*|beos|irix*|solaris*)
                  AC_MSG_RESULT([elf])
                  NASM_FORMAT="elf"
		  PREFIX=""
                  ;;
              [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
                  AC_MSG_RESULT([win32])
                  NASM_FORMAT="win32"
		  PREFIX="-DPREFIX"
                  ;;
          esac
          AS=nasm
          AFLAGS="-I\$(<D)/ -f $NASM_FORMAT $PREFIX"
          ASSEMBLY_EXTENSION="asm"
          ASSEMBLY_SOURCES="SRC_IA32"
       fi

   else
	AC_MSG_WARN([nasm not found - Compiling generic sources only])
	ARCHITECTURE="GENERIC"
   fi

fi

dnl
dnl PPC
dnl

if test "$ARCHITECTURE" = "PPC" ; then
   AS="\$(CC)"
   AFLAGS="-c"
   ASSEMBLY_EXTENSION="s"
   ASSEMBLY_SOURCES="SRC_PPC"
   AC_MSG_CHECKING([for Altivec support])
   cat > conftest.S << EOF
         .text
         vxor 0,0,0
EOF
   if $CC -c conftest.S 2>/dev/null 1>/dev/null ; then
        AC_MSG_RESULT(yes)
        SPECIFIC_CFLAGS="$SPECIFIC_CFLAGS -DARCH_IS_PPC_ALTIVEC"
        ASSEMBLY_SOURCES="SRC_ALTIVEC"
   else
        AC_MSG_RESULT(no)
   fi
   rm -f conftest.*
fi

dnl
dnl IA64
dnl

if test "$ARCHITECTURE" = "IA64" ; then
   AS="\$(CC)"
   AFLAGS="-c"
   ASSEMBLY_EXTENSION="s"
   ASSEMBLY_SOURCES="SRC_IA64"

   case `basename $CC` in
	*ecc*)
		DCT_IA64_SOURCES="SRC_IA64_IDCT_ECC"

		dnl If the compiler is ecc, then i don't know its options
		dnl fallback to "no options"
		if test "$force_default_cxx_options" = "yes" ; then
		   our_cflags_defaults=""
		fi
		;;
	*)
		DCT_IA64_SOURCES="SRC_IA64_IDCT_GCC"
		;;
   esac

fi

dnl ==========================================================================
dnl Check arguments
dnl ==========================================================================

dnl Set the name of the STLPort and Boost libraries
case "$target_os" in
     *bsd* | linux* | irix* | solaris* )
        STLPORT_LIB_NAME="stlport_gcc"
	BOOST_LIB_NAME="libboost_thread-gcc-mt-${BOOST_VER_MAJOR}_${BOOST_VER_MINOR}.so"
	;;
     [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
        STLPORT_LIB_NAME="stlport_mingw32_static"
	BOOST_LIB_NAME="boost_thread-mgw-mt-${BOOST_VER_MAJOR}_${BOOST_VER_MINOR}.dll"
	;;
     darwin*|raphsody*)
        STLPORT_LIB_NAME=""
	BOOST_LIB_NAME=""
	;;
     beos)
        STLPORT_LIB_NAME=""
	BOOST_LIB_NAME=""
	;;
     *)
        STLPORT_LIB_NAME=""
	BOOST_LIB_NAME=""
	;;
esac

if test "${with_stl_path+set}" = set && test $with_stl_arg != no; then
dnl Check STLport library
  saved_CXXFLAGS="${CXXFLAGS}"
  CXXFLAGS="${CXXFLAGS} -I$with_stl_path/include/stlport"
  saved_LDFLAGS="${LDFLAGS}"
  LDFLAGS="${LDFLAGS} -L$with_stl_path/lib/"
  AC_LANG([C++])
  AC_CHECK_HEADER(
    [stl_user_config.h],
    [AC_CHECK_LIB(
      [$STLPORT_LIB_NAME],
      [main],
      [LDFLAGS="$saved_LDFLAGS"
      have_stl_path=yes
      STLPORT_LIBS="-L$with_stl_path/lib -l$STLPORT_LIB_NAME"],
      [AC_MSG_ERROR(STLport library not in $with_stl_path/lib)
      have_stl_path=no])
      STLPORT_CFLAGS="-I$with_stl_path/include/stlport"],
    [AC_MSG_ERROR(STLport headers not in $with_stl_path/include/stlport)
    have_stl_path=no])
  CXXFLAGS="$saved_CXXFLAGS"
  LDFLAGS="$saved_LDFLAGS"
fi
dnl AM_CONDITIONAL(HAVE_STL_PATH, test x$have_stl_path = xyes)

if test "${with_boost_path+set}" = set && test $with_boost_arg != no; then
dnl Check BOOST library
  saved_CXXFLAGS="${CXXFLAGS}"
  CXXFLAGS="${CXXFLAGS} -I${with_boost_path}/include/boost-${BOOST_VER_MAJOR}_${BOOST_VER_MINOR}"
  saved_LDFLAGS="${LDFLAGS}"
  LDFLAGS="${LDFLAGS} -L${with_boost_path}/lib/ ${BOOST_LIB_NAME}.dll"
  AC_LANG([C++])
  AC_CHECK_HEADERS(
    [boost/config.hpp],
    [AC_CHECK_FILE(
      [$with_boost_path/lib/${BOOST_LIB_NAME}],
      [have_boost_path=yes
      BOOST_LIBS="$with_boost_path/lib/${BOOST_LIB_NAME}"],
      [AC_MSG_ERROR(Boost library not in $with_boost_path/lib)
      have_boost_path=no])
    BOOST_CFLAGS="-I$with_boost_path/include/boost-${BOOST_VER_MAJOR}_${BOOST_VER_MINOR}"],
    [AC_MSG_ERROR(Boost headers not in $with_boost_path/include/boost-${BOOST_VER_MAJOR}_${BOOST_VER_MINOR})
    have_boost_path=no])
  CXXFLAGS="$saved_CXXFLAGS"
  LDFLAGS="$saved_LDFLAGS"
fi
dnl AM_CONDITIONAL(HAVE_BOOST_PATH, test x$have_boost_path = xyes)

dnl ==========================================================================
dnl
dnl Check for header files
dnl
dnl ==========================================================================

AC_CHECK_HEADERS(
  [assert.h malloc.h],
  [],
  [AC_MSG_ERROR(Missing header file)])

case "$target_os" in 
  *bsd*|linux*|beos|irix*|solaris*)
    AC_CHECK_HEADERS(
      [pthread.h],
      [],
      [AC_MSG_ERROR(Missing header file)])
    ;;
  [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
    AC_CHECK_HEADERS(
      [initguid.h objbase.h windows.h vfw.h],
      [],
      [AC_MSG_ERROR(Missing header file)])
    AC_CHECK_HEADERS(
      [winbase.h wingdi.h],
      [],
      [AC_MSG_ERROR(Missing header file)],
      [#include <windows.h>])
    ;;
esac

if test "x$with_stl_arg" = "xno"; then
AC_CHECK_HEADER([stl_user_config.h],
                [AC_DEFINE([HAVE_STL])]
		[],
                [AC_MSG_ERROR([STL Library missing. Run configure --help])])
fi

if test "x$with_boost_arg" = "xno"; then
AC_CHECK_HEADER([boost/config.hpp],
                [AC_DEFINE([HAVE_BOOST])]
		[],
                [AC_MSG_ERROR([Boost Library missing. Run configure --help])])
fi

dnl FREETYPE library check
FREETYPE_CONFIG="freetype-config"
AC_ARG_WITH(freetype-config,
[  --with-freetype-config=FILE   freetype-config script to use (eg /usr/bin/freetype-config)],
[
   FREETYPE_CONFIG=$withval
   AC_CHECK_PROG(FREETYPE_CONFIG_IN_PATH, $FREETYPE_CONFIG, yes, no)
   if test $FREETYPE_CONFIG_IN_PATH = no; then
      echo "ERROR:"
      echo "The freetype-config development script you specified:"
      echo "$FREETYPE_CONFIG"
      echo "was not found.  Please check the path and make sure "
      echo "the script exists and is executable."
      AC_MSG_ERROR([Fatal Error: no freetype-config detected.])
      exit;
   fi
   with_freetype_arg="yes"
   FREETYPE_CFLAGS=`$FREETYPE_CONFIG --cflags`
   FREETYPE_LIBS=`$FREETYPE_CONFIG --libs`
],
[
  AC_CHECK_PROG(FREETYPE_CONFIG_IN_PATH, $FREETYPE_CONFIG, yes, no)
  if test $FREETYPE_CONFIG_IN_PATH = no; then
    echo "ERROR:"
    echo "The freetype-config development script was not found in your execute"
    echo "path. This may mean one of several things"
    echo "1. You may not have installed the freetype-devel (or freetype-dev)"
    echo "   packages."
    echo "2. You may have freetype installed somewhere not covered by your path."
    echo ""
    echo "If this is the case make sure you have the packages installed, AND"
    echo "that the freetype-config script is in your execute path (see your"
    echo "shell's manual page on setting the \$PATH environment variable), OR"
    echo "alternatively, specify the script to use with --with-freetype-config."
    AC_MSG_ERROR([Fatal Error: no freetype-config detected.])
    exit;
  fi
  with_freetype_arg="yes"
  FREETYPE_CFLAGS=`$FREETYPE_CONFIG --cflags`
  FREETYPE_LIBS=`$FREETYPE_CONFIG --libs`
])

function vser
{
  v=$1
  VSTART=`echo $v | awk -F_ '{printf("%s", $1);}'`
  V1=`echo $VSTART | awk -F\. '{printf("%s", $1);}'`
  V2=`echo $VSTART | awk -F\. '{printf("%s", $2);}'`
  V3=`echo $VSTART | awk -F\. '{printf("%s", $3);}'`
  V4="0"
  VEND=`echo $v | awk -F_ '{printf("%s", $2);}'`
  if test -n "$VEND"; then
    V4=`echo $VEND | sed s/pre//`
  fi
  V3=$(( $V3 * 100  ));
  V2=$(( $V2 * 10000  ));
  V1=$(( $V1 * 1000000  ));
  V=$(( $V4 + $V3 + $V2 + $V1 ));
  echo $V
}

dnl ==========================================================================
dnl
dnl Now we can set CXXFLAGS if needed
dnl
dnl ==========================================================================

if test "$force_default_cxx_options" = "yes" ; then
   CXXFLAGS="$our_cxxflags_defaults"
fi

dnl ==========================================================================
dnl
dnl Profiling stuff goes here
dnl  - adds options to SPECIFIC_CFLAGS, SPECIFIC_LDLAGS
dnl  - removes incompatible options from CFLAGS
dnl
dnl ==========================================================================

SPECIFIC_LDFLAGS="$SPECIFIC_LDFLAGS $GNU_PROF_LDFLAGS"
SPECIFIC_CFLAGS="$SPECIFIC_CFLAGS $GNU_PROF_CFLAGS"

if test "$enable_gnuprofile" = "yes" ; then
   CFLAGS=`echo $CFLAGS | sed s/'-fomit-frame-pointer'/''/`
fi

dnl ==========================================================================
dnl
dnl Substitions
dnl
dnl ==========================================================================

AC_SUBST(FEATURES)
AC_SUBST(ARCHITECTURE)
AC_SUBST(SHARED_EXTENSION)
AC_SUBST(STATIC_EXTENSION)
AC_SUBST(OBJECT_EXTENSION)
AC_SUBST(NASM_FORMAT)
AC_SUBST(AS)
AC_SUBST(AFLAGS)
AC_SUBST(ASSEMBLY_EXTENSION)
AC_SUBST(GENERIC_SOURCES)
AC_SUBST(ASSEMBLY_SOURCES)
AC_SUBST(CXX)
AC_SUBST(LDFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(SPECIFIC_LDFLAGS)
AC_SUBST(SPECIFIC_CFLAGS)
AC_SUBST(STLPORT_LIBS)
AC_SUBST(STLPORT_CFLAGS)
AC_SUBST(BOOST_LIBS)
AC_SUBST(BOOST_CFLAGS)
AC_SUBST(FREETYPE_LIBS)
AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(RANLIB)
AC_SUBST(PACKAGE)
AC_SUBST(API_MAJOR)
AC_SUBST(API_MINOR)
AC_SUBST(VERSION)
AC_SUBST(STATIC_LIB)
AC_SUBST(PRE_SHARED_LIB)
AC_SUBST(SHARED_LIB)
AC_SUBST(GEN_SOURCES)

dnl ==========================================================================
dnl
dnl Output files
dnl
dnl ==========================================================================

AC_CONFIG_FILES([platform.inc])
AC_CONFIG_FILES([gen_sources.sh],
		[chmod +x gen_sources.sh && ./gen_sources.sh])
AC_CONFIG_FILES([avs.pc])

AC_OUTPUT

#####################################################################
## Info

echo
echo "------------------------------------------------------------------------"
echo " $PACKAGE $VERSION"
echo "------------------------------------------------------------------------"
echo
echo " Install path......: $prefix"
echo
echo " Compilation.......: make"
echo " Installation......: make install"
echo