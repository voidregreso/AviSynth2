/** 
@file
@brief main document
 
These routines are used for ...
*/

/**

@mainpage AviSynth v3 Build Documentation
@version 0.2.4
@author Wilbert Dijkhof <wilbertdijkhof at yahoo dot com>
@author Vincent Torri <vtorri at maths dot univ-evry dot fr>
@date 2005


The windows version of AviSynth v3 can be built using MinGW (g++) or
VC++ .NET 2003 (VC 7.1). The linux version requires g++. The plan of
this installation guide is the following.

\ref AVS-Win-MinGW

\ref AVS-Win-net

\ref ffmpeg

\ref AVS-Linux

We begin with the installation of Avisynth 3 for Windows, using MingW (g++)

@section AVS-Win-MinGW 1. Building AviSynth v3 for Windows using MinGW (g++)


@subsection mingw-inst 1.1 Installing MinGW (g++)

You need to install the <a href="http://sourceforge.net/project/showfiles.php?group_id=2435">following programs</a> in order to use MinGW:

- MSYS-1.0.10.exe\n\n
Install it somewhere (for example in C:/Msys/1.0/***). <b>Warning: don't install it in 'C:/Program Files/Msys/***' or any other folder with an empty space in it, because the compiler doesn't like that.</b>

- mingw-3.1.0.exe\n\n
Install it in C:/Msys/1.0/mingw

- msysDTK-1.0.1.exe\n\n
Install it in C:/Msys/1.0

- mingw-runtime-3.5.tar.gz\n\n
Unzip it in C:/Msys/1.0/mingw/

- w32api-3.1.tar.gz\n\n
Unzip it in C:/Msys/1.0/mingw/

- setting the system file
In the directory C:/Msys/1.0/etc/, create a file named fstab, which
contains the following line:
@code
c:\Algo\msys\1.0\mingw /mingw
@endcode

- setting the location of installed programs
All the programs that don't rely explicitely on mingw will be
installed in /usr/local/ (that is in C:/Msys/1.0/local/). So, to tell
mingw that programs are in this directory, you need to edit the file
C:/Msys/1.0/etc/profile. Add these lines:
@code
#export CFLAGS, LDFLAGS and LD_LIBRARY_PATH
export LD_LIBRARY_PATH="/usr/local/lib"
@endcode
just before the last line (which should be cd "$HOME")

- setting PATH variables

Add to the 'path variables' the folders C:/Msys/1.0/local/bin, C:/Msys/1.0/local/lib and C:/Msys/1.0/mingw/bin

For W2K for example : go to the desktop, right click on 'My Computer' -> Properties -> Advanced tab -> Environment Variables -> select the Variable 'path' -> edit -> add the two folders above:

***;C:/Msys/1.0/bin;C:/Msys/1.0/mingw/bin


- Finally, check whether Msys and MinGW are installed correctly:\n\n
W2K: go to the desktop, double click on 'MSYS'. The MINGW32 terminal (or shell) will pop up, and you will see something like this\n\n
@code
Wilbert@WD ~
$ 
@endcode\n
Try the following (the commands are <a href="http://www.oreillynet.com/linux/cmd/">linux commands</a>):\n\n
@code
Wilbert@WD ~
$ g++
@endcode\n
if you installed everything correctly, you should get\n\n
@code
$ g++
g++.exe: no input files
@endcode\n
To compile AviSynth v3 using the configuration file which is located in ../avisynth/build/linux (it is modified so that avs 3.0 can be compiled with g++ under windows), but we need to compile STLport, Boost and Freetype first, which is described in the following sections.


@subsection mingw-descr 1.2 Description MinGW (g++)

In the previous subsection, a brief overview was given explaining which components have to be installed. This subsection will give a short description of the components. The reader who is not interested in this, can proceed with \ref stlport.

@subsubsection msys-d 1.2.1 MSYS

A Minimal SYStem to provide configure scripts the ability to execute and create a Makefile used by make.

@subsubsection mingw-d 1.2.2 MinGW

MinGW or 'Minimalist GNU for Windows'. It's a collection of freely available and freely distributable Windows specific header files and import libraries combined with GNU toolsets that allow one to produce native Windows programs that do not rely on any 3rd-party C runtime DLLs.

@subsubsection msysdtk-d 1.2.3 msysDTK

An extra package of MSys (Developer ToolKit).

@subsubsection runtime-d 1.2.4 mingw-runtime

Free Microsoft C Runtime and import library definitions.

@subsubsection w32api-d 1.2.5 w32api

Free headers and libraries for the Win32 API.


@subsection avs 1.3 Obtaining the AviSynth v3 source

Get the sources from their <a href=http://sourceforge.net/projects/avisynth2/>website</a>.

Open a MSYS terminal (CVS is already included in MinGW) and use the following command

@code
$ cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/avisynth2 co -r avisynth_3_0 avisynth
@endcode

This will get you the AviSynth v3 branch in a folder called "avisynth" (note "co" means "check out", and "-r" will get you the branch).

@subsection stlport 1.4 Installing STLport

STLport is a multiplatform ANSI C++ Standard Library implementation. In order to install it you should

- Get <a href="http://prdownloads.sourceforge.net/stlport/STLport-5.0.0.tar.gz?download">STLPort-5.0.0.tar.gz</a> and unzip it somewhere. 

- Copy the ../STLport/stlport folder to
C:/Msys/1.0/local/include/stlport.

- Go to the build/lib directory of STLPort:
@code
cd STLport/build/lib
@endcode
To compile the code, execute the following commands:
@code
make -f gcc.mak depend
make -f gcc.mak
make -f gcc.mak release-static
make -f gcc.mak dbg-static
make -f gcc.mak stldbg-static
make -f gcc.mak install
make -f gcc.mak install-release-static
make -f gcc.mak install-dbg-static
make -f gcc.mak install-stldbg-static
@endcode
Now, it should have created the libraries (release and debug mode) in
STLport/lib. Copy the files manually:
@code
cd ../..
cp lib/libstlport* /usr/local/lib/
@endcode


@subsection boost 1.5 Installing Boost

Boost is a bunch of useful libraries (here it is used for the parser, threads and pointers). BJam (or BoostJam) is a make replacement that makes building simple things simple and building complicated things manageable.

- Get <a href="http://prdownloads.sourceforge.net/boost">boost_1_33_0.tar.gz</a> and unzip it somewhere.

- Get <a href="http://prdownloads.sourceforge.net/boost">boost-jam-3.1.10-1-ntx86.zip</a> and unzip it to C:/Msys/1.0/local/bin.

- Open a terminal again, go to ../boost_1_33_0 and type\n\n
@code
$ bjam "-sTOOLS=mingw" --prefix=/usr/local install
@endcode\n

@subsection freetype 1.6 Installing Freetype

Freetype is a free, high-quality, and portable font engine.

Get <a href="http://prdownloads.sourceforge.net/freetype">freetype-2.1.10.tar.gz</a> and unzip it somewhere. Go to the freetype folder
and type

@code
$ ./configure --prefix=/usr/local
$ make
$ make install
@endcode

to compile and install it.


@subsection cb 1.7 Installing needed circular_buffer source files

Get <a
href="http://cvs.sourceforge.net/viewcvs.py/avisynth2/avisynth/build/?only_with_tag=avisynth_3_0">circular_buffer_v3.6.zip</a>
(you can also find it in the avisynth/build folder when downloading
the sources of AviSynth) and unzip it in a folder. Copy the boost
folder to C:/Msys/1.0/local/include/boost-1_33/


@subsection nasm 1.8 Installing Nasm

Nasm or 'the Netwide ASseMbler' is used for optimization of some of the AviSynth code.

Get <a href="http://sourceforge.net/project/showfiles.php?group_id=6208">nasm-0.98.36-win32.zip</a> and unzip it somewhere. Put nasmw.exe in C:/Msys/1.0/local/bin, and rename it to nasm.exe (see also <a href="http://nasm.sourceforge.net/doc/html/nasmdoc1.html">here</a>).

@subsection build 1.10 Building AviSynth v3

Open a MINGW32 terminal and go to

../avisynth/build/linux

You need to creat the configure file first which is used to build AviSynth. Type

@code
$ ./bootstrap.sh
@endcode

The configure file is created, and finally AviSynth can be build:

@code
$ ./configure --with-stl-path=/usr/local/ --with-boost-path=/usr/local
$ make
$ make install
@endcode

to compile and install it.


@section AVS-Win-net 2. Building AviSynth v3 for Windows using VC++ .NET 2003 (VC 7.1)

To successfully compile AviSynth v3 with Microsoft Visual C++ .NET 2003, you first need to obtain some additional libraries and tools. The order in which you compile them is important, so please follow this small guide.

I used a folder C:/dev/ to put everything in. If you want to put the stuff somewhere else, don't forget to change the paths accordingly.


@subsection inst_avs 2.1 Obtaining the AviSynth v3 source

Get the sources from their <a href=http://sourceforge.net/projects/avisynth2/>website</a>.

It is assumed you have installed WinCVS or TortoiseCVS, otherwise you have to do that first. You can use either the gui to get the avisynth_3_0 branch, or the command prompt (for W2K for example: go to the desktop, right click on 'My Computer' -> Properties -> Advanced tab -> Environment Variables -> select the Variable 'path' -> edit -> add the path to WinCVS/TortoiseCVS where cvs.exe is located) to get it:

Make an empty folder called: C:/dev (or whatever). Open a command prompt and use the following commands

@code
cd C:/dev
C:/dev> cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/avisynth2 co -r avisynth_3_0 avisynth
@endcode

This will get you the AviSynth v3 branch (note "co" means "check out", and "-r" will get you the branch).


@subsection net_nasm 2.2 Obtaining and installing NASM assembler

Get <a href=http://prdownloads.sourceforge.net/nasm/nasm-0.98.36-win32.zip?download>nasm version 0.98.36</a>. This is not the latest version, but 0.98.38 has been known to cause problems. Unzip it. Rename nasmw.exe to nasm.exe. Next, set the path to nasm.exe in VC:

Start up VC.net and

- In the top menu, go to Tools, Options.
- In the Options box, select the Projects, VC++ Directories in the tree on the left.
- In the "Show directories for:" pull-down menu, choose "Executable files".
- Click the "new Line" button (with the yellow folder on it).
- Browse to the folder where you unpacked nasm.
- Click the open button. The path is now added to the list.

Close the dialog boxes and close VC.net.


@subsection net_stl 2.3 Obtaining and compiling the STLport library

Get <a href=http://prdownloads.sourceforge.net/stlport/STLport-5.0.0.tar.gz?download>STLport-5.0.0</a>, and unpack the archive to C:/dev (you can unpack tar.gz files with winzip).

Open up a command prompt and give the following commands (assuming everything ended up in a folder C:/dev/STLPORT/):

@code
C:/dev/STLport> "c:/Program files/Microsoft Visual Studio .NET 2003/Common7/Tools/vsvars32.bat"
C:/dev/STLport> cd build/lib
C:/dev/STLport> nmake -f nmake-vc71.mak clean all
C:/dev/STLport> cd ../../lib
C:/dev/STLport> copy STLPORT_VC7146.dll %WinDir%/System32/
@endcode

If you installed Visual Studio in a different location, don't forget to adjust the path to vsvars32.bat. Don't forget the double quotes!

- In the top menu, go to Tools, Options.
- In the Options box, select the Projects, VC++ Directories in the tree on the left.
- In the "Show directories for:" pull-down menu, choose "Include files".
- Click the "new Line" button (with the yellow folder on it).
- Browse to C:/dev/STLport/stlport/.
- Click the "open" button.
- If the new line is not at the top of the list, use the arrow buttons on the right of the box to put the STL path there.
- In the "Show directories for:" pull-down menu, choose "Library files".
- Click the "new Line" button (with the yellow folder on it).
- Browse to C:/dev/STLport/lib/.
- Click the "open" button.

Close the dialog boxes and close VC.net.


@subsection net_boost 2.4 Obtaining and compiling the Boost library

Get <a href=http://prdownloads.sourceforge.net/boost/boost_1_33_0.zip?download>boost_1_33_0.zip</a> and unzip the archive to c:/dev.

You now should have a folder C:/dev/boost_1_33_0/

You also need an add-on to boost: circular_buffer. This is included with the AviSynth source and can be found here:
C:/dev/avs_v3/avisynth/build/circular_buffer_v3.6.zip

- Unpack the C:/dev/avs_v3/avisynth/build/circular_buffer_v3.6.zip to C:/dev/.
- Copy the contents of C:/dev/circular_buffer/boost/ to C:/dev/boost_1_33_0/boost/.
- Copy the contents of C:/dev/circular_buffer/libs/ to C:/dev/boost_1_33_0/libs/.

To compile boost, you need bjam, a "make" replacement. Get it <a href=http://prdownloads.sourceforge.net/boost/boost-jam-3.1.10-1-ntx86.zip>here</a>:

In it you will find bjam.exe. Copy bjam.exe to C:/dev/boost_1_33_0/

Next, compile Boost. Open up a command prompt and give the following commands (assuming everything ended up in a folder C:/dev/boost_1_33_0/):

@code
C:/dev/BOOST_1_33_0>"c:/Program files/Microsoft Visual Studio .NET 2003/Common7/Tools/vsvars32.bat" 
C:/dev/BOOST_1_33_0>bjam "-sTOOLS=vc7.1-stlport" "-sSTLPORT_PATH=C:/dev" stage
@endcode

You will see some errors about boost.python and file not found error's. These can safely be ignored. The only important thing is that when bjam is finished,
C:/dev/boost_1_33_0/stage/lib/boost_thread-vc71-mt-p-1_33.lib was created. Make sure that you copy this dll to your Windows system folder.

Next, add a new include path and library path, just as in \ref net_stl:

- Add C:/dev/boost_1_33_0/stage/lib/ to the Library paths.
- Add C:/dev/boost_1_33_0/boost/ to the Include path.


@subsection net_free 2.5 Obtaining and compiling Freetype

(This step may become obsolete shortly.)

Get <a href=http://prdownloads.sourceforge.net/freetype/ft219.zip>freetype 2.1.9 (ft219.zip)</a> and unpack the zip to C:/dev.

Edit C:/dev/freetype-2.1.9/include/freetype/config/ftconfig.h, look up line 276 and change

@code
#define FT_EXPORT( x )  extern "C" x
@endcode
into
@code
#define FT_EXPORT( x )  extern "C" x __cdecl
@endcode

(If you use notepad, which does not have a line count, do a search on "#define FT_EXPORT( x )  extern "C"". It only appears once in this file.)

- In VC.net, go to file, open solution.
- Open C:/dev/freetype-2.1.9/builds/win32/visualc/freetype.sln.
- In the menu, set the solution configuration pull-down to "Release".
- In the menu, select "Build", "Build Solution".

You will get a bunch of warnings, but it should compile ok.

Next, add a new include path and library path, just as in \ref net_stl:

- Add C:/dev/freetype-2.1.9/objs/ to the Library paths.
- Add C:/dev/freetype-2.1.9/include/ to the Include path.
 

@subsection net_comp 2.6 Compiling AviSynth v3

- In VC.net, go to file, open solution.
- Open C:/dev/avs_v3/avisynth/build/win32/vc71/avisynth.sln.
- In the menu, set the solution configuration pull-down to "Release".
- In the menu, select "Buid", "Build Solution".

You now should have an avisynth.dll in C:/dev/avs_v3/avisynth/build/win32/vc71/Release/


@subsection net_add1 2.7 Additional remarks I - UPX

The avisynth.dll will be quite big. It can be compressed using <a href=http://upx.sourceforge.net/>UPX</a>:

@code
upx -9 -k avisynth.dll
@endcode

You may need to use the -f switch to force it to pack.


@subsection net_add2 2.8 Additional remarks II: Standard edition

The receipt above also works with the standard edition of VC++ .NET 2003, which is also included with the learning edition. However, this version of VC contains the non-optimizing compiler. As a result, AviSynth will be a bit slower.

There is a way around this: the <a href=http://msdn.microsoft.com/visualc/vctoolkit2003/>Microsoft Visual C++ Toolkit 2003</a>, a free download, contains the optimizing version. Install it, and go to:

C:/Program files/Microsoft Visual C++ Toolkit 2003/bin/

Copy the files c2.dll and cl.exe (do make backups of the originals first!!!) to:

C:/Program Files/Microsoft Visual Studio .NET 2003/Vc7/bin/

The optimization options in the gui will still be greyed out. However, optimization switches already in a project file will be passed on to the compiler. And programs compiled on the command prompt will use it directly.


@section AVS-Linux 4. Building AviSynth 3.0 for GNU/Linux x86 (using g++)
To install Avisynth 3.0, we will need the following libraries:
@li STLPort
@li Boost
@li Freetype
@li Gstreamer

This section explains how to install these libraries, taking into
account the system. We will download all the libraries in the same
directory, say \em avs_main_dir, in the home directory. In a terminal, type
@code
cd
mkdir avs_main_dir
@endcode

\note
Shell commands are given throughout this section. Commands in each
subsection are independant and can (have to...) be used as is to
install the libraries.

@subsection linux-stlport 4.1 Installing STLPort

The current stable version of STLPort is 5.0. It is hosted on
<a href=http://sourceforge.net/projects/stlport>SourceForge</a>.

First, download <a
http://prdownloads.sourceforge.net/stlport/STLport-5.0.0.tar.gz?download>STLPort
5.0</a> in the \em avs_main_dir directory. Go into this directory,
uncompress the file and go to the build/lib directory of STLPort:
@code
cd avs_main_dir
tar zxvf STLport-5.0.0.tar.gz
cd STLport/build/lib
@endcode
To compile the code, execute the following commands:
@code
make -f gcc.mak depend
make -f gcc.mak
make -f gcc.mak release-static
make -f gcc.mak dbg-static
make -f gcc.mak stldbg-static
make -f gcc.mak install
make -f gcc.mak install-release-static
make -f gcc.mak install-dbg-static
make -f gcc.mak install-stldbg-static
@endcode
The libraries are located in \em STLport/lib and the headers in \em
STLport/stlport.\n
\li If one wants to install STLPort in \em /usr/local, go the the \em STLport
directory and copy the files manually (while being root, of course):
@code
cd ../..
su <type the root password>
cp lib/libstlport* /usr/local/lib/
cp -R stlport /usr/local/include/
<Ctrl-d>
@endcode
Remark that STLport will be automatically found if installed in \em /usr/local.

\li If one wants to install it locally, say for example \em
\$HOME/local, just do that:
@code
cd ../..
cp lib/libstlport* $HOME/local/lib/
cp -R stlport $HOME/local/include/
@endcode

@subsection linux-boost 4.2 Installing Boost 1.33

First, download <a
href=http://prdownloads.sourceforge.net/boost/boost_1_33_0.tar.gz?download>Boost
1.33</a> from SourceForge, put it in \em avs_main_dir and untar it:
@code
cd
cd avs_main_dir
tar zxvf boost_1_33_0.tar.gz
@endcode
Boost does not use the GNU make utility to compile. Instead it uses
Boost.Jam (an extension or Perforce Jam. Download the <a href=http://prdownloads.sourceforge.net/boost/boost-jam-3.1.10-1-linuxx86.tgz?download>prebuilt
executable here</a>. Download it in \em avs_main_dir and untar it:
@code
tar zxvf boost-jam-3.1.11-1-linuxx86.tgz
@endcode
Now, go to the Boost 1.33 diretory and compile it with the following
commands:
@code
cd boost_1_33_0
../boost-jam-3.1.11-1-linuxx86/bjam "-sTOOLS=gcc" --prefix=/usr/local install
@endcode
In this example, the installation directory of Boost will be \em
/usr/local. So you  need to be root to install it. If one wants to install
it locally (like in \ref linux-stlport), just replace \em
--prefix=/usr/local by \em --prefix=\$HOME/local/.

Remark that Boost will be automatically found if installed in \em /usr/local.

\note
For more informations about installing Boost, go to the <a href=http://www.boost.org/more/getting_started.html>Installation</a>
section of Boost.

@subsection linux-freetype 4.3 Installing Freetype 2.1.10

Avisynth 3.0 displays text with a very efficient font engine, named
Freetype.
\note
The current version stable 2.1.10 has a small problem in the
vertical alignment of the characters. It has been solved in the CVS
version. But for the sake of simplicity (and as it is difficult
to see this problem), we will install only the stable version of
Freetype. For those who want to install the CVS version, go to <a
href=http://www.freetype.org/developer.html#anoncvs>CVS Freetype</a>
section.

First download <a
href=http://prdownloads.sourceforge.net/freetype/freetype-2.1.10.tar.gz?download>Freetype
2.1.10</a> in the \em avs_main_dir directory, untar it and compile it:
@code
cd
cd avs_main_dir
tar zxvf freetype-2.1.10.tar.gz
cd freetype-2.1.10
./configure --prefix/usr/local
make
make install
@endcode
This installs Freetype in \em /usr/local, so you have to be root before
doing \em make \em install. If one wants to install it
elsewhere, change the value given to the \em --prefix parameter.

@subsection linux-gstreamer 4.5 Installing Gstreamer

Gstreamer is a multimedia framework, similar to DirectShow in the
Windows(tm) world. For now, only the 0.8 version is supported. The
new version (0.10) will be supported later, when there are no more
problems with seeking. Gstreamer is only
the core of the framework. To decode the streams, you need to install
Gst-plugins and Gst-FFmpeg. The packages can be downloaded here:
<a href=http://gstreamer.freedesktop.org/src/gstreamer/>Gstreamer</a>,
<a href=http://gstreamer.freedesktop.org/src/gst-plugins/>Gst-plugins</a>,
<a href=http://gstreamer.freedesktop.org/src/gst-ffmpeg/>Gst-FFmpeg</a>.
Put the packages in \em avs_main_dir. Untar them, go into their
directory, configure them, and install them:
@code
cd
cd avs_main_dir/
tar zxvf gstreamer-0.8.11.tar.gz
cd gstreamer-0.8.11
./configure --prefix=/usr/local
make
make install
cd ..
tar zxvf gst-plugins-0.8.11.tar.gz
cd gst-plugins-0.8.11
./configure --prefix=/usr/local
make
make install
cd ..
tar zxvf gst-ffmpeg-0.8.7.tar.gz
cd gst-ffmpeg-0.8.7
./configure --prefix=/usr/local
make
make install
@endcode
This installs Gtreamer, Gst-plugins and Gst-FFmpeg in \em /usr/local,
so you have to be root before doing \em make \em install. If you want
to install it elsewhere, change the value given to the \em --prefix
parameter. 

@subsection linux-asm 4.6 Assembly support with NASM

If you want to compile Avisynth 3.0 with assembly support, you have to
install at least Nasm 0.98.36. This installation is not described yet.


@subsection linux-avs 4.7 Building Avisynth 3.0

Now, we may build Avisynth 3.0 ! Just after having installed 3 more
libraries.

Ok, ok, I'm kidding...

First we have to download the source code which is in cvs:
@code
cd
cd avs_main_dir
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/avisynth2 login
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/avisynth2 co -r avisynth_3_0 avisynth
@endcode

Avisynth 3.0 needs an extension to boost, not yet included in the
current version of boost. This extension is provided in the \em build
directory of avisynth. It suffices to unzip it and copy the files to
the boost include directory:
@code
cd avisynth/build
tar jxvf circular_buffer_v3.7.tar.bz2
cd circular_buffer
@endcode
\li If Boost is installed in \em /usr, you have to be root:
@code
su <enter the root password>
cp -R boost /usr/include/boost-1_33/
<Ctrl-d>
@endcode
\li If Boost is installed in, say \em \$HOME/local:
@code
cp -R boost $HOME/local/include/boost-1_33/
@endcode

And now, we can configure Avixynth 3.0.
@code
cd ../linux
./booststrap.sh
./configure
@endcode
If configure is not able to find automatically one or more library,
we have to specify its path. Assuming that you have
installed everything in \em /usr/:
@code
./configure --with-stl-path=/usr --with-boost-path=/usr --with-freetype-config=/usr/bin/freetype-config
@endcode
If you have installed some of the above libraries elsewhere, just
replace \em /usr by the correct path. The configure script should be
able to find automatically Freetype.

\note
If you want to make a debug build of Avisynth 3.0, just pass to the
\em configure script the options \em --enable-core-debug (for
Avisynth itself).

To build Avisynth, we use the usual commands:
@code
make
make install
@endcode

@section errors 5. Errors when using AviSynth

If you get the following error
<i>
AVI Import filter error: (unknown) (80040154)
</i>
in a messagebox. This error is due to missing dlls, usually ffmpeg's ones (avcodec.dll and avformat.dll). So, copy them to your windows system folder.

@todo
\li Talk about ACM with mingw.
\li Installation of nasm on linux.

*/