dnl ==========================================================================
dnl
dnl Autoconf script for Avisynth 3.0
dnl
dnl Copyright(C) 2006 Vincent Torri <vtorri at univ-evry dot fr>
dnl
dnl ==========================================================================

dnl ==========================================================================
dnl Prerequisites
dnl ==========================================================================

AC_PREREQ([2.54])

dnl ==========================================================================
dnl Default initialization, install prefix and checks build type
dnl ==========================================================================

AC_INIT(Avisynth, 3.0, [http://forum.doom9.org])

AC_PREFIX_DEFAULT("/usr/local")

AC_CONFIG_AUX_DIR([.])
AC_CANONICAL_TARGET

dnl Do not forget to increase that when needed.
API_MAJOR="3"
API_MINOR="0"
VERSION="${API_MAJOR}.${API_MINOR}"

dnl NASM version requirement
minimum_nasm_patch_version=34
nasm_prog="nasm"

dnl BOOST version requirement
BOOST_VERSION_MAJOR="1"
BOOST_VERSION_MINOR="33"
BOOST_VERSION="${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}"

dnl Gstreamer version requirement
GST_REQS=0.10.8
GSTPLUG_REQS=0.10.8

dnl Gtk+ version requirement
GTK_REQS=2.8

dnl Default CFLAGS -- Big impact on overall speed
cflags_warnings="-ansi -pedantic -Wall -W -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations"
cxxflags_warnings="-ansi -Wall -Wpointer-arith -Wconversion -Wno-non-virtual-dtor"

cflags_optimization="-O2 -fstrength-reduce -finline-functions -ffast-math"
cxxflags_optimization="-O2 -fexceptions -fstrength-reduce -finline-functions -ffast-math"

dnl Default GEN_SOURCES for gen_source.sh
dnl On Linux, Vfw and COM files should be removed
GEN_SOURCES=

dnl ==========================================================================
dnl Features - configure options
dnl
dnl modified
dnl
dnl ==========================================================================

FEATURES=""

dnl Compilers version to use
AC_ARG_ENABLE(
   [gcc-3-3-4],
   AC_HELP_STRING(
      [--enable-gcc-3-3-4],
      [Use g++ 3.3.4]),
      [if test "${enable_gcc_3_3_4}" = "yes" ; then
          gpp="/usr/gcc/bin/g++-3.3.4"
       fi],
      [])

dnl Debug mode
AC_ARG_ENABLE(
   [core-debug],
   AC_HELP_STRING(
      [--enable-core-debug],
      [Enable debug mode for avs' core (default=no)]),
   [if test "x${enable_core_debug}" = "xno" ; then
       core_debug_mode="no"
    else
       if test "x${enable_core_debug}" = "xyes" ; then
          core_debug_mode="yes"
       fi
    fi],
   [core_debug_mode="no"])

dnl GNU profile mode
AC_ARG_ENABLE(
   [profile],
   AC_HELP_STRING(
      [--enable-profile],
      [Enable GNU profile mode (default=no)]),
   [if test "x${enable_profile}" = "xno" ; then
       profile_mode="no"
    else
       if test "x${enable_profile}" = "xyes" ; then
          profile_mode="yes"
       fi
    fi],
   [profile_mode="no"])

dnl Assembly code
AC_ARG_ENABLE(
   [assembly],
   AC_HELP_STRING(
      [--disable-assembly],
      [Disable assembly code]),
   [if test "x${enable_assembly}" = "xno" ; then
       assembly="no"
    else
       if test "x${enable_assembly}" = "xyes" ; then
          assembly="yes"
       fi
    fi],
   [assembly="yes"])

dnl Build as a module not a shared lib on darwin
AC_ARG_ENABLE(
   [macosx_module],
   AC_HELP_STRING(
      [--enable-macosx_module],
      [Build as a module on MacOS X]),
   [if test "${enable_macosx_module}" = "yes" ; then
       macosx_module="yes"
    else
       macosx_module="no"
    fi],
   [macosx_module="no"])

dnl Build the gui program
AC_ARG_ENABLE(
   [gui],
   AC_HELP_STRING(
      [--disable-gui],
      [Build the gui program]),
   [ if test "x${enable_gui}" = "xyes" ; then
       gui_program="yes"
    else
       gui_program="no"
    fi ],
   [ gui_program="yes" ])

dnl Build the documentation
AC_ARG_ENABLE(
   [doc],
   AC_HELP_STRING(
      [--disable-doc],
      [Build the documentation]),
   [ if test "x${enable_doc}" = "xyes" ; then
       build_doc="yes"
    else
       build_doc="no"
    fi ],
   [ build_doc="yes" ])

dnl ==========================================================================
dnl Check for the C compiler (could be passed on command line)
dnl ==========================================================================

dnl
dnl First we test if CFLAGS/CXXFLAGS have been passed on command line
dnl I do that because autoconf defaults (-g -O2) suck and they would kill
dnl performance. To prevent that we define a good default CFLAGS/CXXFLAGS at
dnl the end of the script if and only if CXXFLAGS has not been passed on the
dnl command line
dnl
AC_MSG_CHECKING(whether to use default CFLAGS)
if test  x"${CFLAGS}" = x"" ; then
   force_default_c_options="yes"
   AC_MSG_RESULT([yes])
else
   force_default_c_options="no"
   AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING(whether to use default CXXFLAGS)
if test  x"${CXXFLAGS}" = x"" ; then
   force_default_cxx_options="yes"
   AC_MSG_RESULT([yes])
else
   force_default_cxx_options="no"
   AC_MSG_RESULT([no])
fi

dnl Now we can safely check for the C compiler
AC_PROG_CC([gcc])
AC_PROG_CPP([gcc])

dnl checking for attributes
AC_C___ATTRIBUTE__

dnl And the C++ compiler
AC_LANG([C++])
AC_PROG_CXX([g++])
AC_PROG_CXXCPP([g++])

dnl ==========================================================================
dnl Check for the visibility feature of GCC 4.0
dnl ==========================================================================

dnl AC_CHECK_GCC_VISIBILITY([have_visibility="yes"], [have_visibility="no"])
dnl We disable it. There are some problems with stlport and it
have_visibility="no (disabled for now)"

dnl ==========================================================================
dnl Check for the install program
dnl ==========================================================================

AC_PROG_INSTALL

dnl ==========================================================================
dnl Check for the symbolic links
dnl ==========================================================================

AC_PROG_LN_S

dnl ==========================================================================
dnl Check for the ranlib program to generate static library index
dnl ==========================================================================

AC_PROG_RANLIB

dnl ==========================================================================
dnl
dnl This part looks for:
dnl
dnl ARCHITECTURE : The platform architecture
dnl                - IA32 for mmx, mmx-ext, mmx2, sse assembly
dnl                - IA64
dnl                - PPC for PowerPC assembly routines
dnl                - GENERIC for plain C sources only
dnl
dnl BUS: Address bus size (in bits)
dnl      - 32
dnl      - 64
dnl
dnl ==========================================================================

dnl
dnl Looking what sources have to be compiled according to the CPU type
dnl

ARCHITECTURE=""

AC_MSG_CHECKING([for whether to use assembly code])
if test x"${assembly}" = x"yes" ; then
   AC_MSG_RESULT([yes])
   AC_MSG_CHECKING([for architecture type])
   case "${target_cpu}" in
      i[[3456]]86)
         AC_MSG_RESULT(ia32)
         ARCHITECTURE="IA32"
      ;;
      powerpc)
         AC_MSG_RESULT(PowerPC)
         dnl ATM the ppc port is out of date
         dnl ARCHITECTURE="PPC"
         assembly="no"
      ;;
      ia64)
         AC_MSG_RESULT(ia64)
         ARCHITECTURE="IA64"
      ;;
      *)
         AC_MSG_RESULT(${target_cpu})
         assembly="no"
      ;;
   esac
else
   AC_MSG_RESULT([no])
   assembly="no"
fi

dnl ==========================================================================
dnl
dnl Check for OS specific variables
dnl    - SHARED_EXTENSION, STATIC_EXTENSION, OBJECT_EXTENSION
dnl
dnl ==========================================================================

AC_MSG_CHECKING(for build extensions)
SHARED_EXTENSION=""
STATIC_EXTENSION=""
OBJECT_EXTENSION=""
case "${target_os}" in
     *bsd*|linux*|beos|irix*|solaris*)
	AC_MSG_RESULT([.so .a .o])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="so"
	OBJECT_EXTENSION="o"
	;;
     [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
	AC_MSG_RESULT([.dll .a .obj])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="dll"
	OBJECT_EXTENSION="obj"
	;;
     darwin*|raphsody*)
	if test x"${macosx_module}" = x"yes"; then
	   AC_MSG_RESULT([.so .a .o])
	   SHARED_EXTENSION="so"
        else
	   AC_MSG_RESULT([.dynlib .a .o])
	   SHARED_EXTENSION="dylib"
	fi
	STATIC_EXTENSION="a"
	OBJECT_EXTENSION="o"
	;;
     *)
        AC_MSG_RESULT([Unknown OS - Using .so .a .o])
	STATIC_EXTENSION="a"
	SHARED_EXTENSION="so"
	OBJECT_EXTENSION="o"
	;;
esac

dnl ==========================================================================
dnl
dnl Determines best options for CC and LD
dnl  - STATIC_LIB, SHARED_LIB, SPECIFIC_CFLAGS, SPECIFIC_LDLAGS
dnl
dnl
dnl
dnl ==========================================================================

AC_MSG_CHECKING(for platform specific LDFLAGS/CFLAGS)
SPECIFIC_LDFLAGS=""
SPECIFIC_CFLAGS=""
PRE_SHARED_LIB=""

STATIC_LIB="libavisynth.${STATIC_EXTENSION}"

case "${target_os}" in
     linux*|irix*)
	AC_MSG_RESULT([ok])
	SHARED_LIB="libavisynth.${SHARED_EXTENSION}.${API_MAJOR}.${API_MINOR}"
	SPECIFIC_LDFLAGS="-Wl,-soname,libavisynth.${SHARED_EXTENSION}.${API_MAJOR} -shared -lc -lm -ldl"
	SPECIFIC_CFLAGS="-pthread -fPIC"
	;;
     *bsd*)
	AC_MSG_RESULT([ok])
	SHARED_LIB="libavisynth.${SHARED_EXTENSION}.${API_MAJOR}.${API_MINOR}"
	SPECIFIC_LDFLAGS="-Wl,-soname,libavisynth.${SHARED_EXTENSION}.${API_MAJOR} -shared -lc -lm"
	SPECIFIC_CFLAGS="-pthread -fPIC"
	;;
     [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
	AC_MSG_RESULT([ok])
	SHARED_LIB="avisynth.${SHARED_EXTENSION}"
	SPECIFIC_LDFLAGS="-lgdi32 -lvfw32 -luuid -lole32 -lmsacm32 -shared -Wl,--out-implib,\$@.a libavisynth.def"
	SPECIFIC_CFLAGS="-Os -mno-cygwin -mthreads"
	;;
     solaris*)
	AC_MSG_RESULT([ok])
	SHARED_LIB="libavisynth.${SHARED_EXTENSION}.${API_MAJOR}.${API_MINOR}"
	SPECIFIC_LDFLAGS="-Wl,-soname,libavisynth.${SHARED_EXTENSION}.${API_MAJOR} -shared -lc -lm -ldl"
	SPECIFIC_CFLAGS="-pthreads -fPIC"
	;;
     darwin*|raphsody*)
	SPECIFIC_CFLAGS="-fPIC -fno-common -no-cpp-precomp"
	if test x"${macosx_module}" = x"no"; then
	   AC_MSG_RESULT([dylib options])
	   SHARED_LIB="libavisynth.${API_MAJOR}.${SHARED_EXTENSION}"
	   SPECIFIC_LDFLAGS="-dynamiclib -flat_namespace -compatibility_version ${API_MAJOR} -current_version ${API_MAJOR}.${API_MINOR} -install_name ${libdir}/${SHARED_LIB}"
	else
	   AC_MSG_RESULT([module options])
	   PRE_SHARED_LIB="libavisynth.${SHARED_EXTENSION}-temp.o"
	   SHARED_LIB="libavisynth.${SHARED_EXTENSION}.${API_MAJOR}"
	   SPECIFIC_LDFLAGS="-r -keep_private_externs -nostdlib && ${CC} ${LDFLAGS} ${PRE_SHARED_LIB} -o libavisynth.${SHARED_EXTENSION}.${API_MAJOR} -bundle -flat_namespace -undefined suppress"
	fi
	;;
     beos)
	AC_MSG_RESULT([ok])
	SHARED_LIB="libavisynth.${SHARED_EXTENSION}"
	SPECIFIC_LDFLAGS="-nostart"
	SPECIFIC_CFLAGS="-fPIC"
	;;
     *)
        AC_MSG_RESULT([Unknown Platform (Using default -shared -lc -lm)])
	STATIC_LIB="libavisynth.${STATIC_EXTENSION}"
	SHARED_LIB="libavisynth.${SHARED_EXTENSION}"
	SPECIFIC_LDFLAGS=""
	SPECIFIC_CFLAGS=""
	;;
esac

if test x"${PRE_SHARED_LIB}" = x; then
  PRE_SHARED_LIB=$SHARED_LIB
fi

dnl ==========================================================================
dnl
dnl Assembler stuff
dnl  - AS, AFLAGS, ASSEMBLY_EXTENSION, SOURCES
dnl
dnl ==========================================================================

AS=""
AFLAGS=""
ASSEMBLY_EXTENSION=""
ASSEMBLY_SOURCES=""

dnl
dnl IA32
dnl

if test "${ARCHITECTURE}" = "IA32" ; then

   dnl
   dnl Checking nasm existence
   dnl
   AC_CHECK_PROG([ac_nasm], [$nasm_prog], [yes], [no], , [yes])
   if test "${ac_nasm}" = "yes" ; then

      dnl
      dnl Checking nasm patch version
      dnl
      AC_MSG_CHECKING([for nasm patch version])
      nasm_patch=`nasm -r | cut -d '.' -f 3 | cut -d ' ' -f 1`
      if test -z $nasm_patch ; then
        nasm_patch=-1
      fi
      AC_MSG_RESULT([$nasm_patch])


      if test "${nasm_patch}" -lt "${minimum_nasm_patch_version}" ; then
        AC_MSG_ERROR([nasm patch version too old - Update nasm])
      else

         dnl
         dnl Checking nasm format - win32 or elf
         dnl
         AC_MSG_CHECKING([for nasm object format])
         case "${target_os}" in
              *bsd*|linux*|beos|irix*|solaris*)
                  AC_MSG_RESULT([elf])
                  NASM_FORMAT="elf"
		  PREFIX=""
                  ;;
              [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
                  AC_MSG_RESULT([win32])
                  NASM_FORMAT="win32"
		  PREFIX="-DPREFIX"
                  ;;
          esac
          AS=nasm
          AFLAGS="-I\$(<D)/ -f ${NASM_FORMAT} ${PREFIX} -D_FORCE_NASM"
          ASSEMBLY_EXTENSION="asm"
          ASSEMBLY_SOURCES="SRC_IA32"
       fi

   else
	AC_MSG_ERROR([nasm not found - nasm is needed for Avisynth 3.0])
   fi

fi

dnl
dnl PPC
dnl

if test "${ARCHITECTURE}" = "PPC" ; then
   AS="${CC}"
   AFLAGS="-c"
   ASSEMBLY_EXTENSION="s"
   ASSEMBLY_SOURCES="SRC_PPC"
   AC_MSG_CHECKING([for Altivec support])
   cat > conftest.S << EOF
         .text
         vxor 0,0,0
EOF
   if $CC -c conftest.S 2>/dev/null 1>/dev/null ; then
      AC_MSG_RESULT(yes)
      SPECIFIC_CFLAGS="${SPECIFIC_CFLAGS} -DARCH_IS_PPC_ALTIVEC"
      ASSEMBLY_SOURCES="SRC_ALTIVEC"
   else
      AC_MSG_RESULT(no)
   fi
   rm -f conftest.*
fi

dnl
dnl IA64
dnl

if test "${ARCHITECTURE}" = "IA64" ; then
   AS="${CC}"
   AFLAGS="-c"
   ASSEMBLY_EXTENSION="s"
   ASSEMBLY_SOURCES="SRC_IA64"
   case `basename $CC` in
      *ecc*)
         DCT_IA64_SOURCES="SRC_IA64_IDCT_ECC"

         dnl If the compiler is ecc, then i don't know its options
         dnl fallback to "no options"
         cflags_warnings=""
         cxxflags_warnings=""
         if test "${force_default_c_options}" = "yes" ; then
            cflags_defaults=""
         fi
         if test "${force_default_cxx_options}" = "yes" ; then
            cxxflags_optimization=""
         fi
      ;;
      *)
         DCT_IA64_SOURCES="SRC_IA64_IDCT_GCC"
      ;;
   esac
fi

dnl ==========================================================================
dnl
dnl Check arguments
dnl
dnl ==========================================================================


dnl Check GNU profile mode
if test "x${profile_mode}" = "xyes" ; then
   PROFILE_CFLAGS="-pg"
   PROFILE_LDFLAGS="-pg"
else
   PROFILE_CFLAGS=""
   PROFILE_LDFLAGS=""
fi


dnl Check debug mode
if test "x${core_debug_mode}" = "xyes" ; then
   cflags_debug="-g"
   cppflags_debug=""
   cflags_optimization=""
   cxxflags_optimization=""
else
   cflags_debug=""
   cppflags_debug="-DNDEBUG"
   SPECIFIC_LDFLAGS="-s ${SPECIFIC_LDFLAGS}"
fi

dnl ==========================================================================
dnl
dnl Check for dependancies
dnl
dnl ==========================================================================

dnl ==========================================================================
dnl FreeType header and library files
dnl ==========================================================================

PKG_CHECK_MODULES(
   [FREETYPE],
   [freetype2],
   [ ],
   [AC_MSG_ERROR(Freetype isn't installed)])

dnl ==========================================================================
dnl Fontconfig header and library files
dnl ==========================================================================

case "${target_os}" in
   *bsd*|linux*|beos|irix*|solaris*)
      PKG_CHECK_MODULES(
         [FONTCONFIG],
         [fontconfig],
         [ ],
         [AC_MSG_ERROR(Fontconfig isn't installed)])
      FONTCONFIG_CFLAGS="${FONTCONFIG_CFLAGS} -DHAVE_FONTCONFIG"
   ;;
esac

dnl ==========================================================================
dnl Standard header files
dnl ==========================================================================

case "${target_os}" in
   linux*|beos|irix*|solaris*)
      AC_CHECK_HEADER(
         [pthread.h],
         [],
         [AC_MSG_ERROR(Missing header file)])
      AC_CHECK_HEADER(
         [dlfcn.h],
         [AC_CHECK_LIB(
            [dl],
            [dlopen],
            [],
            [AC_MSG_ERROR(Missing function: dlopen)])
          AC_CHECK_LIB(
            [dl],
            [dlclose],
            [],
            [AC_MSG_ERROR(Missing function: dlclose)])
          AC_CHECK_LIB(
            [dl],
            [dlsym],
            [],
            [AC_MSG_ERROR(Missing function: dlsym)])],
         [AC_MSG_ERROR(Missing header file)])
   ;;
   *bsd*)
      AC_CHECK_HEADER(
         [pthread.h],
         [],
         [AC_MSG_ERROR(Missing header file)])
      AC_CHECK_HEADER(
         [dlfcn.h],
         [AC_CHECK_LIB(
            [c],
            [dlopen],
            [],
            [AC_MSG_ERROR(Missing function: dlopen)])
          AC_CHECK_LIB(
            [c],
            [dlclose],
            [],
            [AC_MSG_ERROR(Missing function: dlclose)])
          AC_CHECK_LIB(
            [c],
            [dlsym],
            [],
            [AC_MSG_ERROR(Missing function: dlsym)])],
         [AC_MSG_ERROR(Missing header file)])
   ;;
   [[cC]][[yY]][[gG]][[wW]][[iI]][[nN]]*|mingw32*|mks*)
      AC_CHECK_HEADERS(
         [initguid.h objbase.h windows.h vfw.h],
         [],
         [AC_MSG_ERROR(Missing header file)])
      AC_CHECK_HEADERS(
         [winbase.h wingdi.h],
         [],
         [AC_MSG_ERROR(Missing header file)],
         [#include <windows.h>])
   ;;
esac

dnl ==========================================================================
dnl STLPORT header and library files
dnl ==========================================================================

AM_CHECK_STLPORT(
   [${target_os}],
   [/usr],
   [],
   [AM_CHECK_STLPORT(
      [${target_os}],
      [/usr/local],
      [],
      [AC_MSG_ERROR("STLport is needed !")])
   ])

dnl ==========================================================================
dnl BOOST header and library files
dnl ==========================================================================

AM_CHECK_BOOST(
   [${BOOST_VERSION}_1],
   [${target_os}],
   [/usr],
   [],
   [AM_CHECK_BOOST(
      [${BOOST_VERSION}_1],
      [${target_os}],
      [/usr/local],
      [],
      [AM_CHECK_BOOST(
         [${BOOST_VERSION}],
         [${target_os}],
         [/usr],
         [],
         [AM_CHECK_BOOST(
            [${BOOST_VERSION}],
            [${target_os}],
            [/usr/local],
            [],
            [AC_MSG_ERROR("Boost is needed !")])
         ])
      ])
   ])

dnl ==========================================================================
dnl Gstreamer header and library files
dnl ==========================================================================

case "${target_os}" in
   *bsd*|linux*|beos|irix*|solaris*)
      GST_MAJORMINOR=0.10
      PKG_CHECK_MODULES(
         [GST],
         [gstreamer-${GST_MAJORMINOR} >= ${GST_REQS} gstreamer-plugins-base-${GST_MAJORMINOR} >= ${GSTPLUG_REQS}],
         [HAVE_GSTREAMER="yes"],
         [HAVE_GSTREAMER="no"])

      if test "${HAVE_GSTREAMER}" = "no" ; then
         AC_MSG_ERROR([Gstreamer support is needed when building Avisynth 3.0 on linux])
      fi

      PKG_CHECK_MODULES(
         [GSTBASE],
         [gstreamer-${GST_MAJORMINOR} >= ${GST_REQS} gstreamer-base-${GST_MAJORMINOR} >= ${GST_REQS}],
         [],
         [HAVE_GSTREAMER="no"])

      if test "${HAVE_GSTREAMER}" = "no" ; then
         AC_MSG_ERROR([Gstreamer support is needed when building Avisynth 3.0 on linux])
      fi

dnl Determine the path to install gstreamer plugins
      PKG_GET_VARIABLE([GST_PLUGIN_PATH], [pluginsdir], [gstreamer-${GST_MAJORMINOR}])

      GST_VIDEO_SINK_LIB="gstavs3videosink.${SHARED_EXTENSION}"
      GST_AUDIO_SINK_LIB="gstavs3audiosink.${SHARED_EXTENSION}"
   ;;
esac

dnl ==========================================================================
dnl GUI program
dnl ==========================================================================

PROG=""

if test "x${gui_program}" = "xyes" ; then

   AC_MSG_NOTICE([checking if the gui program can be compiled])

dnl Gtk+ header and library files
   HAVE_GTK="no"
   GTK_MAJORMINOR=2.0
   PKG_CHECK_MODULES(
      [GTK],
      [gtk+-${GTK_MAJORMINOR} >= ${GTK_REQS} gthread-${GTK_MAJORMINOR}],
      [HAVE_GTK="yes"],
      [HAVE_GTK="no"])

   case "${target_os}" in
      *bsd*|linux*|beos|irix*|solaris*)
         if test "x${HAVE_GTK}" = "xno" ; then
            AC_MSG_WARN([
Test application not built (gtk+ ${GTK_REQS} missing).
If you install Gtk+ with packages, don't forget to
install also the development packages])
            gui_program="no"
         else
            PROG="avisynth_test"
         fi
      ;;
   esac

dnl x264 header and library files
   if test "x${gui_program}" = "xyes" ; then
      PKG_CHECK_MODULES(
         [X264],
         [x264gtk],
         [HAVE_X264="yes"],
         [HAVE_X264="no"])
      if test "x${HAVE_X264}" = "xno" ; then
         AC_MSG_WARN([
Test application not built (x264 codec missing).
Either you have not installed x264, or you
have not installed it with the Gtk+ interface.
If you compile it from source, add these options
to configure:
--enable-shared
--enable-gtk])
         gui_program="no"
         PROG=""
      fi
   fi
fi

AC_MSG_CHECKING([whether the gui program can be compiled])
AC_MSG_RESULT([${gui_program}])


dnl ==========================================================================
dnl Documentation
dnl ==========================================================================

DOC=""

if test "x${build_doc}" = "xyes" ; then
   AC_CHECK_PROG([ac_doxygen], [doxygen], [yes], [no], , [yes])
   if test "x${ac_doxygen}" = "xyes" ; then
      DOC="doc"
   else
      build_doc="no"
   fi
fi


dnl ==========================================================================
dnl
dnl Now we can set CFLAS/CXXFLAGS if needed
dnl
dnl ==========================================================================

if test "${force_default_c_options}" = "yes" ; then
   CPPFLAGS="${cppflags_debug} ${cppflags_have_attribute} ${cppflags_visibility}"
   CFLAGS="${cflags_debug} ${cflags_warnings} ${cflags_optimization} ${cflags_visibility}"
fi

if test "${force_default_cxx_options}" = "yes" ; then
   CXXFLAGS="${cflags_debug} ${cxxflags_warnings} ${cxxflags_optimization} ${cxxflags_visibility}"
fi

dnl ==========================================================================
dnl
dnl Debug stuff goes here
dnl  - adds options to SPECIFIC_CFLAGS, SPECIFIC_LDLAGS
dnl  - removes incompatible options from CFLAGS and CXXFLAGS
dnl
dnl ==========================================================================

SPECIFIC_LDFLAGS="${SPECIFIC_LDFLAGS}"
SPECIFIC_CFLAGS="${SPECIFIC_CFLAGS}"

if test "x${profile_mode}" = "xyes" ; then
   CFLAGS=`echo ${CFLAGS} | sed s/'-fomit-frame-pointer'/''/`
   CXXFLAGS=`echo ${CXXFLAGS} | sed s/'-fomit-frame-pointer'/''/`
fi

dnl ==========================================================================
dnl
dnl SOURCES
dnl
dnl ==========================================================================

GENERIC_GST_VIDEO_SOURCES="SRC_GST_VIDEO_GENERIC"
GENERIC_GST_AUDIO_SOURCES="SRC_GST_AUDIO_GENERIC"
GENERIC_BIN_SOURCES="SRC_BIN_GENERIC"
GENERIC_LIB_SOURCES="SRC_LIB_GENERIC"

dnl ==========================================================================
dnl
dnl Substitions
dnl
dnl ==========================================================================


AC_SUBST(FEATURES)
AC_SUBST(ARCHITECTURE)
AC_SUBST(SHARED_EXTENSION)
AC_SUBST(STATIC_EXTENSION)
AC_SUBST(OBJECT_EXTENSION)
AC_SUBST(NASM_FORMAT)
AC_SUBST(AS)
AC_SUBST(AFLAGS)
AC_SUBST(ASSEMBLY_EXTENSION)
AC_SUBST(GENERIC_SOURCES)
AC_SUBST(ASSEMBLY_SOURCES)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(CPPFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(SPECIFIC_CFLAGS)
AC_SUBST(SPECIFIC_LDFLAGS)
AC_SUBST(PROFILE_CFLAGS)
AC_SUBST(PROFILE_LDFLAGS)
AC_SUBST(INSTALL)
AC_SUBST(LN_S)
AC_SUBST(RANLIB)
AC_SUBST(API_MAJOR)
AC_SUBST(API_MINOR)
AC_SUBST(VERSION)
AC_SUBST(STATIC_LIB)
AC_SUBST(PRE_SHARED_LIB)
AC_SUBST(SHARED_LIB)
AC_SUBST(GENERIC_GST_VIDEO_SOURCES)
AC_SUBST(GENERIC_GST_AUDIO_SOURCES)
AC_SUBST(GENERIC_BIN_SOURCES)
AC_SUBST(GENERIC_LIB_SOURCES)
AC_SUBST(GST_VIDEO_SINK_LIB)
AC_SUBST(GST_AUDIO_SINK_LIB)
AC_SUBST(PROG)
AC_SUBST(DOC)


dnl ==========================================================================
dnl
dnl Output files
dnl
dnl ==========================================================================

AC_CONFIG_FILES([platform.inc])
AC_CONFIG_FILES([gen_sources.sh],
                [chmod +x gen_sources.sh && ./gen_sources.sh])
AC_CONFIG_FILES([avisynth-3.0.pc])

AC_OUTPUT

#####################################################################
## Info

echo
echo "------------------------------------------------------------------------"
echo " ${PACKAGE_NAME} ${VERSION}"
echo "------------------------------------------------------------------------"
echo
echo " OS..................: ${target_os}"
echo
echo " Visibility feature..: ${have_visibility}"
echo " Core debug mode.....: ${core_debug_mode}"
echo " GNU Profile mode....: ${profile_mode}"
echo " ASM support.........: ${assembly}"
echo
echo " Gui program.........: ${gui_program}"
echo
echo " Documentation.......: ${build_doc}"
echo
echo " Install path........: ${prefix}"
echo "   binaries..........: ${bindir}"
echo "   libraries.........: ${libdir}"
echo "   headers...........: ${includedir}/avisynth-3.0"
echo "   documentation.....: ${datadir}/doc/avisynth-3.0"
case "${target_os}" in
   *bsd*|linux*|beos|irix*|solaris*)
      echo "   gst-plugins.......: ${GST_PLUGIN_PATH}"
   ;;
esac
echo
echo " Compilation.........: make"
echo " Installation........: make install"
case "${target_os}" in
   *bsd*|linux*|beos|irix*|solaris*)
      echo
      echo " Make sure that Gst-FFmpeg is installed. Without it, most of"
      echo " the usual video streams will not be decoded (huffyuv, xvid,"
      echo " divx, x264 for example). We recommend that you install it"
   ;;
esac
echo
